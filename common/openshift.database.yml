kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: ${NAME}-${ZONE}-mongodb
  labels:
    template: ${NAME}-${ZONE}-mongodb
    app: ${NAME}
parameters:
  - name: NAME
    displayName: Name
    description: The name assigned to all of the frontend objects defined in this template.
    value: nrpti
  - name: ZONE
    displayName: Deployment Zone
    description: The zone or environment (dev, test, prod, PR number)
    required: true
  - name: COMPONENT
    displayName: Component Name
    description: The component part of the name (mongodb, api, etc)
    value: mongodb
  - name: GROUP_NAME
    displayName: Group Name
    description: The name assigned to a group of objects deployed together
    value: nrpti
  - name: MONGO_VER
    displayName: Mongo Version Number
    description:
      The version number of Mongo that matches the version in project file
      package.json
    value: '3.6'
  - name: DATABASE_CPU_LIMITS
    value: '1'
  - name: DATABASE_MEMORY_LIMITS
    value: 2Gi
  - name: DATABASE_CPU_REQUESTS
    value: 150m
  - name: DATABASE_MEMORY_REQUESTS
    value: 1Gi
  - name: DATABASE_USER
    displayName: MongoDB Username
    description: Username for MongoDB user that will be used for accessing the database.
    parameters: -p SECRET=${{ secrets.MONGODB_USER }}
  - name: DATABASE_PASSWORD
    displayName: MongoDB Password
    description: Password for the MongoDB user.
    parameters: -p SECRET=${{ secrets.MONGODB_PASSWORD }}
  - name: DATABASE_NAME
    displayName: Database Name
    parameters: -p SECRET=${{ secrets.MONGODB_DATABASE_NAME }}
  - name: DATABASE_ADMIN_PASSWORD
    displayName: Database Administrator Password
    description: Password for the database admin user.
    parameters: -p SECRET=${{ secrets.MONGODB_ADMIN_PASSWORD }}
  - name: DATABASE_VOLUME_CAPACITY
    displayName: Database Volume Capacity
    description: Volume space available for mongo database, e.g. 512Mi, 2Gi.
    value: 10Gi
    required: true
  - name: APP_IMAGE_NAMESPACE
    displayName: Namespace containing application images.
    description: Namespace containing application images.
    value: f00029-tools
    required: true
  - name: MONGODB_ADMIN_PASSWORD
    displayName: MongoDB Admin Password
    description: Password for the MongoDB admin user.
    required: true
  - name: MONGODB_DATABASE_NAME
    displayName: MongoDB Database Name
    description: Name of the MongoDB database.
    required: true
  - name: MONGODB_USER
    displayName: MongoDB User
    description: Username for the MongoDB user that will be used for accessing the database.
    required: true
  - name: MONGODB_PASSWORD
    displayName: MongoDB Password
    description: Password for the MongoDB user.
    required: true
objects:
  - kind: Secret
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
    stringData:
      MONGODB_ADMIN_PASSWORD: ${MONGODB_ADMIN_PASSWORD}
      MONGODB_DATABASE: ${MONGODB_DATABASE_NAME}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD}
      MONGODB_USERNAME: ${MONGODB_USER}
    type: Opaque
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}-data
      labels:
        app: ${NAME}
        zone: ${ZONE}
        component: ${COMPONENT}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${DATABASE_VOLUME_CAPACITY}
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}
        zone: ${ZONE}
        component: ${COMPONENT}
    spec:
      ports:
        - name: ${COMPONENT}-${NAME}
          port: 27017
          targetPort: 27017
      selector:
        name: ${NAME}-${ZONE}-${COMPONENT}
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}
        zone: ${ZONE}
        component: ${COMPONENT}
        role: database
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}-${ZONE}-${COMPONENT}
            from:
              kind: ImageStreamTag
              namespace: ${APP_IMAGE_NAMESPACE}
              name: mongodb:${MONGO_VER}
      replicas: 1
      selector:
        matchLabels:
          name: ${NAME}-${ZONE}-${COMPONENT}
      template:
        metadata:
          name: ${NAME}-${ZONE}-${COMPONENT}
          labels:
            name: ${NAME}-${ZONE}-${COMPONENT}
            app: ${NAME}
            zone: ${ZONE}
            component: ${COMPONENT}
            role: database
        spec:
          containers:
            - name: ${NAME}-${ZONE}-${COMPONENT}
              image: image-registry.openshift-image-registry.svc:5000/${APP_IMAGE_NAMESPACE}/mongodb:${MONGO_VER}
              ports:
                - containerPort: 27017
              env:
                - name: MONGODB_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: MONGODB_USERNAME
                - name: MONGODB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: MONGODB_PASSWORD
                - name: MONGODB_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: MONGODB_DATABASE
                - name: MONGODB_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: MONGODB_ADMIN_PASSWORD
              readinessProbe:
                timeoutSeconds: 5
                initialDelaySeconds: 3
                exec:
                  command:
                    - "/bin/sh"
                    - "-i"
                    - "-c"
                    - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                      --eval='quit()'
              livenessProbe:
                timeoutSeconds: 5
                initialDelaySeconds: 30
                tcpSocket:
                  port: 27017
              resources:
                limits:
                  cpu: ${DATABASE_CPU_LIMITS}
                  memory: ${DATABASE_MEMORY_LIMITS}
                requests:
                  cpu: ${DATABASE_CPU_REQUESTS}
                  memory: ${DATABASE_MEMORY_REQUESTS}
              volumeMounts:
                - name: ${NAME}-${ZONE}-${COMPONENT}-data
                  mountPath: /var/lib/mongodb/data
          volumes:
            - name: ${NAME}-${ZONE}-${COMPONENT}-data
              persistentVolumeClaim:
                claimName: ${NAME}-${ZONE}-${COMPONENT}-data
